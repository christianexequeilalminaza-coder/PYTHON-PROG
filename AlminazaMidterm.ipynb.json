{
  "metadata": {
    "kernelspec": {
      "name": "python",
      "display_name": "Python (Pyodide)",
      "language": "python"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    }
  },
  "nbformat_minor": 5,
  "nbformat": 4,
  "cells": [
    {
      "id": "8fbf1cc3-6c8b-4e1c-9b8a-461627c470a9",
      "cell_type": "markdown",
      "source": "# Q1. String Normalizer and Finder",
      "metadata": {}
    },
    {
      "id": "c9a67a39-8edb-4b69-a082-1ce8fd2e7b9b",
      "cell_type": "code",
      "source": "Prompt (paste verbatim):\n-Write a function normalize_and_find(text: str, needle: str) -> int that: (1) trims whitespace on both ends, (2) converts to lowercase, then (3) returns the index of the first occurrence of needle using a safe search (return −1 if not found). Discuss alternatives (find vs. index), and how your choice affects error handling. Anchor concepts: stripping, case conversion, find/replace, string immutability.",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "2695aeda-b2ac-47b9-b1ae-4919a58351b8",
      "cell_type": "code",
      "source": "def normalize_and_find(text: str, needle: str) -> int:\n    t = text.strip().lower()\n    n = needle.strip().lower()\n    return t.find(n)",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "6eb8289a-d0d7-4a1d-8e21-11a8e91b5376",
      "cell_type": "code",
      "source": "Critique\nCorrectness: Works for case-insensitive search. Trims both inputs. Returns −1 on no match via find. Empty needle returns 0 by Python design.\nComplexity: O(n) time. O(n) space due to new strings after strip and lower.\nRobustness: No type checks. None inputs would fail. Behavior for empty needle is implicit.\nReadability: Clear and short. No docstring. Reference: :contentReference[oaicite:6]index=6\nFaithfulness: Uses find for safe search. index would raise ValueError on no match.",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "157ca83f-e704-4969-8d2c-4503a9b25138",
      "cell_type": "code",
      "source": "def normalize_and_find(text: str, needle: str) -> int:\n    \"\"\"Trim and lowercase both inputs, then return first index of needle or -1.\"\"\"\n    if not isinstance(text, str) or not isinstance(needle, str):\n        raise TypeError(\"text and needle must be strings\")\n    t = text.strip().lower()\n    n = needle.strip().lower()\n    return t.find(n)\n\nif __name__ == \"__main__\":\n    assert normalize_and_find(\" Hello World \", \"world\") == 6\n    assert normalize_and_find(\"AAA\", \"a\") == 0\n    assert normalize_and_find(\"abc\", \"x\") == -1\n    assert normalize_and_find(\"\", \"\") == 0\nprint(\"Hello World\")\nprint(\"Q1 tests passed.\")",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "ac49d857-d6f4-437d-9966-e68a503a821d",
      "cell_type": "markdown",
      "source": "# Q2. Leetspeak Translator (Parametric)",
      "metadata": {}
    },
    {
      "id": "eaaac4c8-9ede-47b0-8001-81dca737136e",
      "cell_type": "code",
      "source": "Prompt (paste verbatim)\n-Generalize our leetspeak idea: write translate(text: str, mapping: dict[str,str]) -> str that applies a mapping (e.g., {’a’:’4’,’e’:’3’,...}) over lowercase letters only, leaving others unchanged. Explain why strings are immutable and show an efficient approach (e.g., list join vs. repeated concatenation). Anchor concepts: replace, iteration strategies, efficiency.",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "c8c187e4-304e-47f2-99fc-e962b6e24aba",
      "cell_type": "code",
      "source": "def translate(text: str, mapping: dict[str, str]) -> str:\n    out = []\n    for ch in text:\n        if ch.islower() and ch in mapping:\n            out.append(mapping[ch])\n        else:\n            out.append(ch)\n    return \"\".join(out)",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "082a7181-ad0a-4bd0-a9fc-5fcefff3c98e",
      "cell_type": "code",
      "source": "Critique\nCorrectness: Applies mapping to lowercase only. Leaves others unchanged.\nComplexity: O(n) time. O(n) space for the list buffer.\nRobustness: Assumes mapping keys and values are strings. No checks for non-string inputs.\nReadability: Clear loop. Good use of join. No docstring. Reference: :contentReference[oaicite:7]index=7\nFaithfulness: Uses list join to avoid O(n^2) concatenation. Respects string immutability.",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "02306123-1422-48e8-875e-5346953ca5d2",
      "cell_type": "code",
      "source": "from typing import Mapping\n\ndef translate(text: str, mapping: Mapping[str, str]) -> str:\n    \"\"\"Apply mapping to lowercase letters only. Leave other characters unchanged.\"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"text must be a string\")\n    out_chars = []\n    for ch in text:\n        if ch.islower():\n            out_chars.append(mapping.get(ch, ch))\n        else:\n            out_chars.append(ch)\n    return \"\".join(out_chars)\n\n\nif __name__ == \"__main__\":\n    m = {\"a\": \"4\", \"e\": \"3\", \"i\": \"1\", \"o\": \"0\", \"s\": \"5\"}\n    assert translate(\"aA!eE\", m) == \"4A!3E\"\n    assert translate(\"Mississippi\", m) == \"M1551551pp1\"\n    assert translate(\"123\", m) == \"123\"\n    print(translate(\"Mississippi\",m))",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "96b32f14-a316-404f-88c3-7e1f788ddf26",
      "cell_type": "markdown",
      "source": "# Q3. Currency Formatter & Ties-to-Even",
      "metadata": {}
    },
    {
      "id": "52b6896e-25e0-4f2a-9a5e-6f638edb493c",
      "cell_type": "code",
      "source": "Prompt (paste verbatim)\n-Write fmt_money(x: float) -> str that returns a string like 1,234.50 using proper rounding (banker’s rounding / ties-to-even). Include test cases that demonstrate ties (e.g., 2.5, 3.5). Explain floating-point representation error and how formatting mitigates it for display. Anchor concepts: numbers, round, representation error, formatted printing.",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "d0d1108f-0f92-4137-ac7f-15abb0d2335e",
      "cell_type": "code",
      "source": "from decimal import Decimal, ROUND_HALF_EVEN\n\ndef fmt_money(x: float) -> str:\n        d = Decimal(str(x))\n        q = d.quantize(Decimal(\"0.01\"), rounding=ROUND_HALF_EVEN)\n        return f\"{q:,.2f}\"",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "ea61d580-6ad8-43f7-9097-8c93e1f1128f",
      "cell_type": "code",
      "source": "Critique\nCorrectness: Formats with thousands separators and two decimals. Uses half-even rounding. Safe conversion via Decimal(str(x)) to reduce binary float error.\nComplexity: O(k) on the number of digits. Constant space besides the Decimal.\nRobustness: No handling for non-numeric inputs. Negative values format correctly.\nReadability: Clear and short. No docstring. No tie tests included. Reference::contentReference[oaicite:8]index=8\nFaithfulness: Uses Decimal and quantize with ROUND_HALF_EVEN. Matches lecture guidance for money.",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "e61f7b4a-13f6-473e-b22a-b3cbd1028ee2",
      "cell_type": "code",
      "source": "from decimal import Decimal, InvalidOperation, ROUND_HALF_EVEN\n\ndef fmt_money(x: float) -> str:\n    \"\"\"Format x as money with commas and two decimals using ties-to-even.\"\"\"\n    try:\n        d = Decimal(str(x))\n    except Exception as exc:\n        raise TypeError(\"x must be a number\") from exc\n    q = d.quantize(Decimal(\"0.01\"), rounding=ROUND_HALF_EVEN)\n    return f\"{q:,.2f}\"\n\n\ndef round_to_int_ties_even(x: float) -> int:\n    \"\"\"Helper for demonstrating ties at .5 to nearest integer.\"\"\"\n    d = Decimal(str(x)).quantize(Decimal(\"1\"), rounding=ROUND_HALF_EVEN)\n    return int(d)\n\n\nif __name__ == \"__main__\":\n    assert fmt_money(1234.5) == \"1,234.50\"\n    assert fmt_money(1234.56) == \"1,234.56\"\n    assert fmt_money(1234.561) == \"1,234.56\"\n    assert fmt_money(1234.565) == \"1,234.56\"  # 56 is even at two decimals\n    assert fmt_money(1234.575) == \"1,234.58\"  # 57 is odd, rounds up\n    assert fmt_money(-12.5) == \"-12.50\"\n    assert round_to_int_ties_even(2.5) == 2\n    assert round_to_int_ties_even(3.5) == 4\n    \nprint(fmt_money(1234.56))\nprint(fmt_money(2.5))\nprint(fmt_money(3.5))\n",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "df21ba11-98e1-4020-ae4e-7aefd1dca36f",
      "cell_type": "markdown",
      "source": "#Q4. Exponent Tool & Input Validation",
      "metadata": {}
    },
    {
      "id": "44e03392-c6e3-4e22-b034-8050c4cecac1",
      "cell_type": "code",
      "source": "Prompt (paste verbatim)\n-Create a CLI program exponent.py that reads two values, validates they are numeric, handles errors gracefully (e.g., ValueError), and prints a ** b with clear messages. Compare using try/except vs. pre-validation with str.isdigit() (and why isdigit() is insufficient for negatives/floats). Anchor concepts: arithmetic operators, exceptions, input.",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "a54541a9-e84e-4634-a433-d1feaed569f6",
      "cell_type": "code",
      "source": "a = input(\"Enter base a: \")\nb = input(\"Enter exponent b: \")\n\ntry:\n    x = float(a)\n    y = float(b)\n    print(f\"{x} ** {y} = {x ** y}\")\nexcept ValueError:\n    print(\"Error: please enter numeric values",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "37829f3d-74f0-4dae-8b11-f21813517e1b",
      "cell_type": "code",
      "source": "Critique\nCorrectness: Works for valid numbers. Produces a ** b. Handles ValueError.\nComplexity: O(1).\nRobustness: No handling for 0 ** negative. No exit code. No help text. No support for command line args.\nReadability: Minimal and readable. No docstring or structure. Reference: :contentReference[oaicite:9]index=9, :contentReference[oaicite:10]index=10\nFaithfulness: Uses try or except for validation. No isdigit misuse.",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "f923dedd-d7bb-4314-8142-ee1559275e28",
      "cell_type": "code",
      "source": "import sys\nfrom decimal import Decimal, InvalidOperation\nimport argparse",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "0115683e-a3fb-4eb3-81e8-222f765fdee4",
      "cell_type": "code",
      "source": "def parse_number(s: str) -> float:\n    try:\n        return float(s)\n    except ValueError as exc:\n        raise ValueError(f\"invalid number: {s}\") from exc",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "64e60798-b5a1-450f-a42e-91c6f68ae093",
      "cell_type": "code",
      "source": "def compute_power(a_str: str, b_str: str):\n    try:\n        a = parse_number(a_str)\n        b = parse_number(b_str)\n        result = a ** b\n        print(f\"{a} ** {b} = {result}\")\n    except ValueError as err:\n        print(f\"Error. {err}\")\n    except ZeroDivisionError:\n        print(\"Error. 0 cannot be raised to a negative power.\")\n    except OverflowError:\n        print(\"Error. Result too large.\")",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "845c6660-79bc-4a55-a4aa-359f47319cc6",
      "cell_type": "code",
      "source": "# Cell 4: Interactive input cell\na_input = input(\"Enter base a: \")\nb_input = input(\"Enter exponent b: \")\ncompute_power(a_input, b_input)",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "de6095af-9286-45b2-acdb-5bdcb0c4d7a0",
      "cell_type": "markdown",
      "source": "#Q5. Password Policy Check (If/Elif/Else + Loops)",
      "metadata": {}
    },
    {
      "id": "f1826cf0-889f-4ff7-90d0-3700d26a2de9",
      "cell_type": "code",
      "source": "Prompt (paste verbatim)\n-Implement check_password(pw: str) -> dict that validates: length ≥ 10, at least one uppercase, one lowercase, one digit, one symbol in !@#$%^&*, and no spaces. Return a dict of booleans per rule and an overall pass/fail. Include a loop that prompts until a valid password is entered (allow quit with Q/q). Anchor concepts: conditionals, logical operators, loops, break/continue.",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "394e9428-cd4c-468e-8c06-c9fcc536edbc",
      "cell_type": "code",
      "source": "def check_password(pw: str) -> dict:\n    symbols = set(\"!@#$%^&*\")\n    return {\n        \"length_ok\": len(pw) >= 10,\n        \"upper_ok\": any(c.isupper() for c in pw),\n        \"lower_ok\": any(c.islower() for c in pw),\n        \"digit_ok\": any(c.isdigit() for c in pw),\n        \"symbol_ok\": any(c in symbols for c in pw),\n        \"no_space_ok\": not any(c.isspace() for c in pw),\n        \"passed\": False,  # placeholder\n    }",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "2f0d8a6d-01da-4956-9afc-d57f0395ec8f",
      "cell_type": "code",
      "source": "Critique\nCorrectness: Computes each rule. Does not set passed correctly. No prompt loop. No docstring.\nComplexity: O(n) time. O(1) extra space.\nRobustness: No type checks. Does multiple passes over the string.\nReadability: Clear structure. Needs a single pass for efficiency and accuracy. Reference: :contentReference[oaicite:11]index=11 \nFaithfulness: Uses any and string predicates as taught.",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "02f4cf4e-1f2d-45cf-9afc-07d9cda74f2f",
      "cell_type": "code",
      "source": "from typing import Dict\n\nREQUIRED_SYMBOLS = set(\"!@#$%^&*\")\n\ndef check_password(pw: str) -> Dict[str, bool]:\n    \"\"\"Validate password against length, case mix, digit, symbol, and no spaces.\"\"\"\n    if not isinstance(pw, str):\n        raise TypeError(\"pw must be a string\")\n\n    rules = {\n        \"length\": len(pw) >= 10,\n        \"uppercase\": any(c.isupper() for c in pw),\n        \"lowercase\": any(c.islower() for c in pw),\n        \"digit\": any(c.isdigit() for c in pw),\n        \"symbol\": any(c in REQUIRED_SYMBOLS for c in pw),\n        \"no_spaces\": \" \" not in pw\n    }\n    rules[\"valid\"] = all(rules.values())\n    return rules\n\n\ndef prompt_until_valid() -> None:\n    \"\"\"Prompt user until a valid password is entered, or quit with Q/q.\"\"\"\n    while True:\n        pw = input(\"Enter password (Q to quit): \")\n        if pw.lower() == \"q\":\n            print(\"Quit.\")\n            break\n\n        result = check_password(pw)\n        if result[\"valid\"]:\n            print(\"Password accepted.\")\n            break\n\n        print(\"Invalid password. Please fix:\")\n        if not result[\"length\"]:\n            print(\" - Must be at least 10 characters long.\")\n        if not result[\"uppercase\"]:\n            print(\" - Must include at least one uppercase letter.\")\n        if not result[\"lowercase\"]:\n            print(\" - Must include at least one lowercase letter.\")\n        if not result[\"digit\"]:\n            print(\" - Must include at least one digit.\")\n        if not result[\"symbol\"]:\n            print(\" - Must include at least one symbol from !@#$%^&*.\")\n        if not result[\"no_spaces\"]:\n            print(\" - Must not contain spaces.\")\n        print()\n\n\nif __name__ == \"__main__\":\n    prompt_until_valid()\n    ",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "06be7ae8-2424-4388-aa87-25d81d710e1e",
      "cell_type": "markdown",
      "source": "#Q6. Dice Simulation (Monte Carlo)",
      "metadata": {}
    },
    {
      "id": "aa53a33e-4bb4-4c1b-b213-0ea1709c18e8",
      "cell_type": "code",
      "source": "Prompt (paste verbatim)\n-Write roll() -> int to simulate a fair die, then simulate 100,000 rolls to estimate the probability that the sum of two dice equals 7. Compare empirical result to the exact probability. Comment on random seeding and reproducibility. Anchor concepts: random module, simulation, averages.",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "a770989a-73fa-4112-9dc7-63f08a378ac5",
      "cell_type": "code",
      "source": "import random\n\ndef roll() -> int:\n    return random.randint(1, 6)\ndef estimate_p_sum_7(trials: int = 100_000) -> float:\n    hits = 0\n    for _ in range(trials):\n        if roll() + roll() == 7:\n            hits += 1\n    return hits / trials\n\np = estimate_p_sum_7()\nprint(\"Estimated P(sum=7):\", p)\nprint(\"Exact:\", 6 / 36)",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "c523a256-a952-4328-a64a-bd35ef9799fe",
      "cell_type": "code",
      "source": "Critique\nCorrectness: Works and uses a fair die. Compares to 6 or 36. Print only. No seed control. No tolerance checks.\nComplexity: O(trials) time. O(1) space. This is optimal for simulation.\nRobustness: No parameter validation. Relies on global RNG. No separation into functions for testing.\nReadability: Acceptable, but could add docstrings and constants; avoid bare globals. Reference: :contentReference[oaicite:12]index=12\nFaithfulness: Uses random appropriately; could better address “seeding and reproducibility” requirement.",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "f86ae682-ae1a-4500-afd8-b70b33c65cb2",
      "cell_type": "code",
      "source": "\"\"\"\nMonte Carlo: probability that the sum of two fair dice equals a target.\n\nAnchor: random module, simulation, averages.\n\"\"\"\n\nfrom __future__ import annotations\nimport random\nfrom typing import Optional\n\ndef roll() -> int:\n    \"\"\"Return one fair die roll in [1, 6].\"\"\"\n    return random.randint(1, 6)\n\ndef simulate_prob_sum_equals(target_sum: int = 7,\n                             trials: int = 100_000,\n                             seed: Optional[int] = 42) -> float:\n    \"\"\"\n    Simulate `trials` pairs of die rolls; return P(sum == target_sum).\n    If `seed` is not None, set the RNG seed for reproducibility.\n    \"\"\"\n    if trials <= 0:\n        raise ValueError(\"trials must be positive\")\n    if not (2 <= target_sum <= 12):\n        raise ValueError(\"target_sum must be between 2 and 12 for two dice\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    hits = 0\n    for _ in range(trials):\n        if roll() + roll() == target_sum:\n            hits += 1\n    return hits / trials\n\ndef exact_prob_sum_equals(target_sum: int) -> float:\n    \"\"\"Exact probability for the sum of two independent fair dice.\"\"\"\n    if not (2 <= target_sum <= 12):\n        return 0.0\n    # Number of ordered pairs (i,j) with i,j in 1..6 and i+j==target\n    ways = sum(1 for i in range(1, 7) for j in range(1, 7) if i + j == target_sum)\n    return ways / 36.0\n\nif __name__ == \"__main__\":\n    est = simulate_prob_sum_equals(7, 100_000, seed=12345)\n    exact = exact_prob_sum_equals(7)\n    print(f\"Estimated: {est:.6f}\")\n    print(f\"Exact:     {exact:.6f}\")\n    print(f\"Abs error: {abs(est - exact):.6f}\")\n\n",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "78b2300d-9f5a-4832-b63a-fbc2f4c3ac42",
      "cell_type": "markdown",
      "source": "#Q7. OOP: Vehicles with Odometer and Fuel",
      "metadata": {}
    },
    {
      "id": "d3949a3d-1517-46af-89f8-7aa91d84dc15",
      "cell_type": "code",
      "source": "Prompt (paste verbatim)\n-Make a small OOP example with Vehicle → Car and Truck. Each has color, mileage, fuel_liters. Implement drive(km, km_per_liter) and refuel(liters).\nFuel should not go below 0. Let Truck override something (like efficiency). Provide a tiny usage demo.",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "a325700c-5fdb-4e93-a02b-62ecf865352d",
      "cell_type": "code",
      "source": "class Vehicle:\n    def __init__(self, color, mileage=0, fuel_liters=0):\n        self.color = color\n        self.mileage = mileage\n        self.fuel_liters = fuel_liters\n\n    def drive(self, km, km_per_liter):\n        needed = km / km_per_liter\n        self.mileage += km\n        self.fuel_liters -= needed  # might go negative\n\n    def refuel(self, liters):\n        self.fuel_liters += liters\n\nclass Car(Vehicle):\n    pass\n\nclass Truck(Vehicle):\n    def drive(self, km, km_per_liter):\n        # trucks are less efficient, so just use 90% of given efficiency\n        super().drive(km, km_per_liter * 0.9)\n\n# demo\nc = Car(\"red\", 1000, 20)\nc.drive(100, 10)\nprint(c.mileage, c.fuel_liters)\n\nt = Truck(\"blue\", 5000, 50)\nt.drive(100, 8)\nprint(t.mileage, t.fuel_liters)",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "0e63aee7-ea8e-4e69-b99d-7b6d2b20bfb1",
      "cell_type": "code",
      "source": "Critque\nCorrectness: Basic structure OK and shows inheritance + override. No input validation for negative distances or refuels.\nComplexity: Methods are O(1) time and space, as expected.\nRobustness: No checks for zero/negative km_per_liter (division by zero risk). No return value indicating how far was actually driven if fuel is insufficient.\nReadability: Missing type hints and docstrings; comments minimal. Reference: :contentReference[oaicite:13]index=13\nFaithfulness: Inheritance is used, but the override’s efficiency math is confusing (multiplying efficiency by 0.9 increases consumption only indirectly). Better to override an efficiency factor clearly.",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "f757e4a5-1c60-4262-85c1-985c98b0190a",
      "cell_type": "code",
      "source": "class Vehicle:\n    \"\"\"Base class for all vehicles.\"\"\"\n    def __init__(self, color: str, mileage: float = 0.0, fuel_liters: float = 0.0):\n        self.color = color\n        self.mileage = mileage\n        self.fuel_liters = fuel_liters\n\n    def refuel(self, liters: float) -> None:\n        \"\"\"Add fuel (liters must be non-negative).\"\"\"\n        if liters < 0:\n            raise ValueError(\"Liters must be non-negative.\")\n        self.fuel_liters += liters\n\n    def drive(self, km: float, km_per_liter: float) -> float:\n        \"\"\"\n        Drive up to 'km' at the given efficiency.\n        Never consume more fuel than available.\n        Returns the actual kilometers driven.\n        \"\"\"\n        if km < 0:\n            raise ValueError(\"Distance must be non-negative.\")\n        if km_per_liter <= 0:\n            raise ValueError(\"Efficiency must be positive.\")\n\n        max_km_possible = self.fuel_liters * km_per_liter\n        actual_km = min(km, max_km_possible)\n        fuel_used = actual_km / km_per_liter\n\n        self.mileage += actual_km\n        self.fuel_liters -= fuel_used\n        return actual_km\n\n\nclass Car(Vehicle):\n    \"\"\"A normal car with standard efficiency.\"\"\"\n    pass\n\n\nclass Truck(Vehicle):\n    \"\"\"A truck that is less fuel-efficient (80% efficiency of a car).\"\"\"\n    EFFICIENCY_FACTOR = 0.8\n\n    def drive(self, km: float, km_per_liter: float) -> float:\n        # Trucks consume more fuel → reduce efficiency\n        adjusted_efficiency = km_per_liter * self.EFFICIENCY_FACTOR\n        return super().drive(km, adjusted_efficiency)\n# --- Usage demo ---\nif __name__ == \"__main__\":\n    car = Car(\"red\", mileage=1000, fuel_liters=10)\n    truck = Truck(\"blue\", mileage=5000, fuel_liters=8)\n\n    print(\"Car drives:\", car.drive(60, km_per_liter=10), \"km\")\n    print(\"Car fuel left:\", round(car.fuel_liters, 2), \"L\")\n\n    print(\"Truck drives:\", truck.drive(100, km_per_liter=8), \"km\")\n    print(\"Truck fuel left:\", round(truck.fuel_liters, 2), \"L\")\n    ",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "13415120-8763-4440-87b3-9ab9b0e8acd1",
      "cell_type": "markdown",
      "source": "#Q8. OOP + Composition: Kennel with Dogs",
      "metadata": {}
    },
    {
      "id": "672da4aa-6c96-4747-915a-67320fb6a653",
      "cell_type": "code",
      "source": "Prompt (paste verbatim)\n-Create Dog with name, age, breed and a bark() method. Then a Kennel that stores many Dogs and can add_dog, remove_dog, oldest_dog, and find_by_breed. \nKeep it straightforward with a small demo.",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "6da2f60b-c52b-4026-be34-6330e2c45e7e",
      "cell_type": "code",
      "source": "class Dog:\n    def __init__(self, name, age, breed):\n        self.name = name\n        self.age = age\n        self.breed = breed\n    def bark(self):\n        return \"Woof!\"\n\nclass Kennel:\n    def __init__(self):\n        self.dogs = []\n    def add_dog(self, dog):\n        self.dogs.append(dog)\n    def remove_dog(self, name):\n        self.dogs = [d for d in self.dogs if d.name != name]\n    def oldest_dog(self):\n        return max(self.dogs, key=lambda d: d.age) if self.dogs else None\n    def find_by_breed(self, breed):\n        return [d for d in self.dogs if d.breed == breed]\n\n# demo\nk = Kennel()\nk.add_dog(Dog(\"Rex\", 5, \"Labrador\"))\nk.add_dog(Dog(\"Milo\", 7, \"Beagle\"))\nprint(k.oldest_dog().name)\nprint([d.name for d in k.find_by_breed(\"Beagle\")])",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "42d38080-a92b-49fd-8fb6-a8e467665a35",
      "cell_type": "code",
      "source": "Critique\nCorrectness: All required methods exist and behave reasonably on non‑empty data. remove_dog removes by name but silently does nothing if not present.\nComplexity: All operations are O(n) on the number of dogs; fine for small sizes. Might mention an index (dict by name/breed) if scaling.\nRobustness: No input validation (e.g., negative age). Oldest_dog returns None for empty kennel—caller must handle. \nReadability: Lacks type hints and docstrings; OK but could be clearer. Reference: :contentReference[oaicite:14]index=14\nFaithfulness: Uses composition correctly (Kennel has Dogs). Inheritance would be wrong: a Kennel is not a kind of Dog.",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "89d7c858-054a-4a0c-9b05-5abf99b1153c",
      "cell_type": "code",
      "source": "#IMPROVED CODE#\n\nfrom __future__ import annotations\nfrom dataclasses import dataclass\nfrom typing import Iterable, Optional, Iterator\n\n\n@dataclass(frozen=True, slots=True)\nclass Dog:\n    \"\"\"A dog with a name, age, and breed.\"\"\"\n    name: str\n    age: int\n    breed: str\n\n    def bark(self) -> str:\n        \"\"\"Return a barking sound.\"\"\"\n        return \"Woof!\"\n\n\nclass Kennel:\n    \"\"\"Manage a collection of Dog objects keyed by name.\"\"\"\n    __slots__ = (\"_dogs\",)\n\n    def __init__(self, dogs: Iterable[Dog] = ()) -> None:\n        self._dogs: dict[str, Dog] = {}\n        for dog in dogs:\n            self.add_dog(dog)\n\n    def add_dog(self, dog: Dog, *, overwrite: bool = False) -> None:\n        \"\"\"Add a dog; raise error if name exists unless overwrite=True.\"\"\"\n        if not overwrite and dog.name in self._dogs:\n            raise ValueError(f\"A dog named '{dog.name}' already exists.\")\n        self._dogs[dog.name] = dog\n\n    def remove_dog(self, name: str) -> bool:\n        \"\"\"Remove a dog by name. Return True if removed, False if not found.\"\"\"\n        return self._dogs.pop(name, None) is not None\n\n    def get(self, name: str) -> Optional[Dog]:\n        \"\"\"Get a dog by name, or None if not found.\"\"\"\n        return self._dogs.get(name)\n\n    def oldest_dog(self) -> Optional[Dog]:\n        \"\"\"Return the oldest dog, or None if kennel is empty.\"\"\"\n        return max(self._dogs.values(), key=lambda d: d.age) if self._dogs else None\n\n    def find_by_breed(self, breed: str, *, case_insensitive: bool = True) -> list[Dog]:\n        \"\"\"Return a list of dogs matching the given breed.\"\"\"\n        if case_insensitive:\n            breed = breed.casefold()\n            return [d for d in self._dogs.values() if d.breed.casefold() == breed]\n        return [d for d in self._dogs.values() if d.breed == breed]\n\n    def __contains__(self, name: str) -> bool:\n        \"\"\"Check if a dog with this name exists.\"\"\"\n        return name in self._dogs\n\n    def __len__(self) -> int:\n        \"\"\"Return number of dogs in the kennel.\"\"\"\n        return len(self._dogs)\n\n    def __iter__(self) -> Iterator[Dog]:\n        \"\"\"Iterate over dogs in insertion order.\"\"\"\n        return iter(self._dogs.values())\n\n\n# --- Demo ---\nif __name__ == \"__main__\":\n    k = Kennel()\n    k.add_dog(Dog(\"Rex\", 5, \"Labrador\"))\n    k.add_dog(Dog(\"Milo\", 7, \"Beagle\"))\n\n    print(\"Oldest dog:\", k.oldest_dog().name)              # Milo\n    print(\"Breed: German Shepherd\", [d.name for d in k.find_by_breed(\"German Shepherd\")])  \n    print(\"Milo says:\", k.get(\"Milo\").bark())                # Woof!\n    print(\"Removed Rex?\", k.remove_dog(\"Rex\"))             # True\n    ",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "b1492be0-5265-4844-b602-6ff70c7833ad",
      "cell_type": "markdown",
      "source": "#Q9. Modules and Packages: Helpers",
      "metadata": {}
    },
    {
      "id": "c7f18877-c467-473a-b28a-f90e58fa4dec",
      "cell_type": "code",
      "source": "Prompt (paste verbatim)\n-Make a small package helpers with two modules, one with shout(s) that returns the uppercase version of a string, and one with area(l, w) that returns l*w. Show a main.py that imports with import ... as ... and also from ... import ... and uses both.",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "9ea1aca1-25c1-4e21-afb8-94f0e4bb627d",
      "cell_type": "code",
      "source": "# string_utils module\nclass string_utils:\n    @staticmethod\n    def shout(s: str) -> str:\n        return s.upper()\n\n# math_utils module\nclass math_utils:\n    @staticmethod\n    def area(l: float, w: float) -> float:\n        return l * w\n        \n# --- main program ---\nimport types\nimport sys\n\n# Register fake modules in sys.modules so 'import helpers.string_utils' works\nhelpers = types.ModuleType(\"helpers\")\nhelpers.string_utils = string_utils\nhelpers.math_utils = math_utils\nsys.modules[\"helpers\"] = helpers\nsys.modules[\"helpers.string_utils\"] = string_utils\nsys.modules[\"helpers.math_utils\"] = math_utils\n\n# --- now the same imports as before ---\nimport helpers.string_utils as su\nfrom helpers.math_utils import area\n\nprint(su.shout(\"holahh!\"))\nprint(area(3, 4))",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "e9be3cd1-c31e-405e-9fc9-b68543fbe0f6",
      "cell_type": "code",
      "source": "Critique\nCorrectness: The package structure and imports are valid. Functions behave as specified.\nComplexity: O(1) for both functions.\nRobustness: No type hints or input checks (e.g., non‑numeric input to area). __init__.py is empty; fine, though exposing a clean package namespace can help.\nReadability: Minimal comments/docstrings. Function names are clear. Reference: :contentReference[oaicite:15]index=15\nFaithfulness: Demonstrates imports (import ... as ... and from ... import ...), aligning with our modules/namespace lectures.",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "9c8968a4-73f5-4b8d-a39f-9962d9b18e50",
      "cell_type": "code",
      "source": "# IMPROVED CODE #\n\n# --- inline package builder (single notebook cell, no files needed) ---\nfrom __future__ import annotations\nimport sys\nimport types\nfrom typing import Callable, Mapping, Any\n\n\ndef register_inline_package(\n    package_name: str,\n    modules: Mapping[str, Mapping[str, Any]],\n) -> None:\n    \"\"\"\n    Create an in-memory package and its submodules and register them in sys.modules.\n    Example:\n        register_inline_package(\"helpers\", {\n            \"string_utils\": {\"shout\": shout},\n            \"math_utils\": {\"area\": area},\n        })\n    Then you can `import helpers.string_utils as su` normally.\n    \"\"\"\n    # Make (or reuse) the package shell\n    pkg = sys.modules.get(package_name)\n    if not isinstance(pkg, types.ModuleType):\n        pkg = types.ModuleType(package_name)\n        # mark as a package\n        pkg.__path__ = []  # type: ignore[attr-defined]\n        sys.modules[package_name] = pkg\n\n    # Expose submodules and attributes\n    exported = []\n    for mod_name, attrs in modules.items():\n        fqmn = f\"{package_name}.{mod_name}\"\n        mod = types.ModuleType(fqmn)\n        mod.__package__ = package_name\n\n        for attr_name, obj in attrs.items():\n            setattr(mod, attr_name, obj)\n\n        sys.modules[fqmn] = mod\n        setattr(pkg, mod_name, mod)\n        exported.append(mod_name)\n\n    # Optional: make `from helpers import *` reveal submodules\n    pkg.__all__ = tuple(exported)\n\n\n# --- utils implementations (plain functions with validation & docs) ---\n\n# string_utils.py\ndef shout(s: str) -> str:\n    \"\"\"Return the input string uppercased.\"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"shout(s): 's' must be a str\")\n    return s.upper()\n\n\ndef titlecase(s: str) -> str:\n    \"\"\"Return Title Case for the string.\"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"titlecase(s): 's' must be a str\")\n    return s.title()\n\n\n# math_utils.py\ndef area(l: float, w: float) -> float:\n    \"\"\"Area of a rectangle (l × w). Both must be finite and non-negative.\"\"\"\n    for name, v in ((\"l\", l), (\"w\", w)):\n        if not isinstance(v, (int, float)):\n            raise TypeError(f\"area({name}): must be int|float\")\n        if v < 0:\n            raise ValueError(f\"area({name}): must be non-negative\")\n    return float(l) * float(w)\n\ndef perimeter(l: float, w: float) -> float:\n    \"\"\"Perimeter of a rectangle (2l + 2w).\"\"\"\n    for name, v in ((\"l\", l), (\"w\", w)):\n        if not isinstance(v, (int, float)):\n            raise TypeError(f\"perimeter({name}): must be int|float\")\n        if v < 0:\n            raise ValueError(f\"perimeter({name}): must be non-negative\")\n    return 2.0 * (float(l) + float(w))\n\n# --- register the inline package + submodules ---\nregister_inline_package(\n    \"helpers\",\n    {\n        \"string_utils\": {\n            \"shout\": shout,\n            \"titlecase\": titlecase,\n        },\n        \"math_utils\": {\n            \"area\": area,\n            \"perimeter\": perimeter,\n        },\n    },\n)\n\n# --- use them with normal imports (exactly like real files) ---\nimport helpers.string_utils as su\nfrom helpers.math_utils import area, perimeter\n\nprint(su.shout(\"holahh!\"))\nprint(area(3, 4))\nprint(perimeter(3, 4))\nprint(su.titlecase(\"Adios\"))",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "fa14f1ec-81b7-45c3-867f-6569ad31eae2",
      "cell_type": "markdown",
      "source": "#Q10. Robust Temperature Converter (Functions + Exceptions)",
      "metadata": {}
    },
    {
      "id": "8b1c02c6-f9fb-4259-a283-e85e23f179e5",
      "cell_type": "code",
      "source": "Prompt (paste verbatim)\n-Write cel_to_far(c) and far_to_cel(f) with type hints and docstrings. Add a simple command‑line interface that asks the user for conversion direction and value \nand handles invalid inputs without crashing. Include a few tests.",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "fb55d6fa-fc17-4afb-a759-9777c9ef79ad",
      "cell_type": "code",
      "source": "def cel_to_far(c):\n    return c * 9/5 + 32\n\ndef far_to_cel(f):\n    return (f - 32) * 5/9\n\nif __name__ == \"__main__\":\n    direction = input(\"Type c2f or f2c: \").strip()\n    value = float(input(\"Enter value: \"))\n    if direction == \"c2f\":\n        print(cel_to_far(value))\n    else:\n        print(far_to_cel(value))",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "9dd765b2-e8eb-4d55-8184-4a035f45a189",
      "cell_type": "code",
      "source": "Critique\nCorrectness: Formulas are correct. CLI lacks validation: invalid direction or non‑numeric value raises exceptions or silently takes the else branch.\nComplexity: Constant time/space.\nRobustness: No error handling or loops to re‑prompt; no informative messages; no tests.\nReadability: Lacks docstrings, type hints, and explicit rounding/formatting discussion. \nFaithfulness: Needs explicit exceptions/validation per instructions; no tests provided.",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "c3117692-2a6d-4728-ac26-197b43c62b4a",
      "cell_type": "code",
      "source": "# IMPROVED CODE #\n\nfrom __future__ import annotations\nfrom typing import Union\n\nNumber = Union[int, float]\n\ndef cel_to_far(c: Number) -> float:\n    \"\"\"Convert Celsius to Fahrenheit.\"\"\"\n    return float(c) * 9.0 / 5.0 + 32.0\n\ndef far_to_cel(f: Number) -> float:\n    \"\"\"Convert Fahrenheit to Celsius.\"\"\"\n    return (float(f) - 32.0) * 5.0 / 9.0\n\ndef main() -> None:\n    \"\"\"Interactive temperature converter.\"\"\"\n    print(\"=== Temperature Converter ===\")\n    while True:\n        mode = input(\"Choose conversion (C2F for °C→°F, F2C for °F→°C, or Q to quit): \").strip().lower()\n\n        if mode in {\"q\", \"quit\"}:\n            print(\"Adios!\")\n            break\n\n        if mode not in {\"c2f\", \"f2c\"}:\n            print(\"Invalid option. Please type C2F, F2C, or Q.\")\n            continue\n\n        try:\n            value = float(input(\"Enter the temperature value: \").strip())\n        except ValueError:\n            print(\"❌ Invalid number. Please try again.\")\n            continue\n\n        if mode == \"c2f\":\n            result = cel_to_far(value)\n            print(f\"{value:.2f} °C = {result:.2f} °F\")\n        else:\n            result = far_to_cel(value)\n            print(f\"{value:.2f} °F = {result:.2f} °C\")\n\n        print(\"-\" * 30)\n\nif __name__ == \"__main__\":\n    main()",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    }
  ]
}